{"ast":null,"code":"import _regeneratorRuntime from\"/Users/sidmadala/Documents/Duke/School/2020-2021/Semester 1/CS 316/Project/fireside/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/sidmadala/Documents/Duke/School/2020-2021/Semester 1/CS 316/Project/fireside/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/sidmadala/Documents/Duke/School/2020-2021/Semester 1/CS 316/Project/fireside/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useRef}from'react';// import logo from './logo.svg'; // Get a better logo\nimport'./App.css';// importing components\n// import {ChatRoom} from \"components/ChatRoom.js\";\n// import {SignIn, SignOut} from \"components/Auth.js\";\n// importing firebase sdk modules\nimport firebase from'firebase/app';import'firebase/firestore';import'firebase/auth';// importing firebase webhooks\nimport{useAuthState}from'react-firebase-hooks/auth';import{useCollectionData}from'react-firebase-hooks/firestore';// firebase configuration\nfirebase.initializeApp({apiKey:\"AIzaSyBCsCSugwJCU3Hlzmo9HdKXW6AF8oOrMnA\",authDomain:\"fireside-b0dbe.firebaseapp.com\",databaseURL:\"https://fireside-b0dbe.firebaseio.com\",projectId:\"fireside-b0dbe\",storageBucket:\"fireside-b0dbe.appspot.com\",messagingSenderId:\"410455411650\",appId:\"1:410455411650:web:fe7f067423f899f8d9a45b\",measurementId:\"G-73915MQHEL\"});var auth=firebase.auth();var firestore=firebase.firestore();function App(){// Getting user login state\nvar _useAuthState=useAuthState(auth),_useAuthState2=_slicedToArray(_useAuthState,1),user=_useAuthState2[0];// Asking user to sign-in to see chatroom\nreturn/*#__PURE__*/React.createElement(\"div\",{className:\"App\"},/*#__PURE__*/React.createElement(\"header\",null,/*#__PURE__*/React.createElement(\"h1\",null,\"Fireside Chat\"),/*#__PURE__*/React.createElement(SignOut,null)),/*#__PURE__*/React.createElement(\"section\",null,user?/*#__PURE__*/React.createElement(ChatRoom,null):/*#__PURE__*/React.createElement(SignIn,null)));}function SignIn(){// Creating Google account login provider for firebase\nvar signInWithGoogle=function signInWithGoogle(){var GoogleAuthenticationProvider=new firebase.auth.GoogleAuthProvider();auth.signInWithPopup(GoogleAuthenticationProvider);};return/*#__PURE__*/React.createElement(\"button\",{onClick:signInWithGoogle},\"Sign in with Google\");}function SignOut(){// Checking if user exists to sign out\n// Inline function to sign out of chat room\nreturn auth.currentUser&&/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return auth.signOut();}},\"Sign Out\");}// Main chat room in application\n// TODO: Split into multiple chat rooms and add functionality for creating and deleting rooms\nfunction ChatRoom(){// const scroller = useRef();  // Creating reference to enable autoscrolling in chat\nvar messagesRef=firestore.collection(\"messages\");// Getting messages collection for current chat room\nvar query=messagesRef.orderBy(\"createdOnTimestamp\").limit(100);// TODO: change to be dynamic refresh for infinite scroll\n// Querying messages from firebase for display on frontend\nvar _useCollectionData=useCollectionData(query,{idField:'id'}),_useCollectionData2=_slicedToArray(_useCollectionData,1),messages=_useCollectionData2[0];// Setting initial state of form \nvar _useState=useState(''),_useState2=_slicedToArray(_useState,2),formValue=_useState2[0],setFormValue=_useState2[1];// Writing new messages to firebase database\nvar sendMessage=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(event){var _auth$currentUser,uid,photoURL;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:// Preventing page refresh on every message submission\nevent.preventDefault();_auth$currentUser=auth.currentUser,uid=_auth$currentUser.uid,photoURL=_auth$currentUser.photoURL;// Resolve when document is formatted with new message\n_context.next=4;return messagesRef.add({uid:uid,createdOnTimestamp:firebase.firestore.FieldValue.serverTimestamp(),text:formValue,photoURL:photoURL});case 4:// Setting message back to empty string\nsetFormValue(\"\");// scroller.current.scrollIntoView({ behavior: 'smooth' });  // Autoscrolling to bottom of chat\ncase 5:case\"end\":return _context.stop();}}},_callee);}));return function sendMessage(_x){return _ref.apply(this,arguments);};}();// Looping over all messages with ChatMessage component to pass message id and contents\nreturn/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"main\",null,messages&&messages.map(function(msg){return/*#__PURE__*/React.createElement(ChatMessage,{key:msg.id,message:msg});})),/*#__PURE__*/React.createElement(\"form\",{onSubmit:sendMessage},/*#__PURE__*/React.createElement(\"input\",{value:formValue,onChange:function onChange(event){return setFormValue(event.target.value);},placeholder:\"Message\"}),/*#__PURE__*/React.createElement(\"button\",{type:\"submit\",disabled:!formValue},\"Send\")));}function ChatMessage(props){// Extracting message and id from object\nvar _props$message=props.message,uid=_props$message.uid,photoURL=_props$message.photoURL,text=_props$message.text;// Checking if message was sent or recieved\nvar messageClass=uid===auth.currentUser.uid?\"sent\":\"received\";// Returning text body of message\n// Idk why we need tildes in the className but we do\n// Stole the default profile photo from Google Images\nreturn/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",{className:\"message \".concat(messageClass)},/*#__PURE__*/React.createElement(\"img\",{src:photoURL||\"https://moonvillageassociation.org/wp-content/uploads/2018/06/default-profile-picture1.jpg\"}),/*#__PURE__*/React.createElement(\"p\",null,text)));}export default App;","map":{"version":3,"sources":["/Users/sidmadala/Documents/Duke/School/2020-2021/Semester 1/CS 316/Project/fireside/src/App.js"],"names":["React","useState","useRef","firebase","useAuthState","useCollectionData","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","App","user","SignIn","signInWithGoogle","GoogleAuthenticationProvider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","ChatRoom","messagesRef","collection","query","orderBy","limit","idField","messages","formValue","setFormValue","sendMessage","event","preventDefault","uid","photoURL","add","createdOnTimestamp","FieldValue","serverTimestamp","text","map","msg","id","target","value","ChatMessage","props","message","messageClass"],"mappings":"2lBAAA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,CAAyBC,MAAzB,KAAsC,OAAtC,CACA;AACA,MAAO,WAAP,CAEA;AACA;AACA;AAEA;AACA,MAAOC,CAAAA,QAAP,KAAqB,cAArB,CACA,MAAO,oBAAP,CACA,MAAO,eAAP,CAEA;AACA,OAAQC,YAAR,KAA2B,2BAA3B,CACA,OAAQC,iBAAR,KAAgC,gCAAhC,CAEA;AACAF,QAAQ,CAACG,aAAT,CAAuB,CACrBC,MAAM,CAAE,yCADa,CAErBC,UAAU,CAAE,gCAFS,CAGrBC,WAAW,CAAE,uCAHQ,CAIrBC,SAAS,CAAE,gBAJU,CAKrBC,aAAa,CAAE,4BALM,CAMrBC,iBAAiB,CAAE,cANE,CAOrBC,KAAK,CAAE,2CAPc,CAQrBC,aAAa,CAAE,cARM,CAAvB,EAWA,GAAMC,CAAAA,IAAI,CAAGZ,QAAQ,CAACY,IAAT,EAAb,CACA,GAAMC,CAAAA,SAAS,CAAGb,QAAQ,CAACa,SAAT,EAAlB,CAGA,QAASC,CAAAA,GAAT,EAAe,CAEb;AAFa,kBAGEb,YAAY,CAACW,IAAD,CAHd,gDAGNG,IAHM,mBAKb;AACA,mBACE,2BAAK,SAAS,CAAC,KAAf,eACE,+CACE,8CADF,cAEE,oBAAC,OAAD,MAFF,CADF,cAME,mCACGA,IAAI,cAAG,oBAAC,QAAD,MAAH,cAAkB,oBAAC,MAAD,MADzB,CANF,CADF,CAaD,CAGD,QAASC,CAAAA,MAAT,EAAkB,CAEhB;AACA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,EAAM,CAC7B,GAAMC,CAAAA,4BAA4B,CAAG,GAAIlB,CAAAA,QAAQ,CAACY,IAAT,CAAcO,kBAAlB,EAArC,CACAP,IAAI,CAACQ,eAAL,CAAqBF,4BAArB,EACD,CAHD,CAKA,mBACE,8BAAQ,OAAO,CAAED,gBAAjB,wBADF,CAGD,CAED,QAASI,CAAAA,OAAT,EAAmB,CAEjB;AACA;AACA,MAAOT,CAAAA,IAAI,CAACU,WAAL,eACL,8BAAQ,OAAO,CAAE,yBAAMV,CAAAA,IAAI,CAACW,OAAL,EAAN,EAAjB,aADF,CAGD,CAED;AACA;AACA,QAASC,CAAAA,QAAT,EAAoB,CAElB;AACA,GAAMC,CAAAA,WAAW,CAAGZ,SAAS,CAACa,UAAV,CAAqB,UAArB,CAApB,CAAuD;AACvD,GAAMC,CAAAA,KAAK,CAAGF,WAAW,CAACG,OAAZ,CAAoB,oBAApB,EAA0CC,KAA1C,CAAgD,GAAhD,CAAd,CAAoE;AAEpE;AANkB,uBAOC3B,iBAAiB,CAACyB,KAAD,CAAQ,CAACG,OAAO,CAAE,IAAV,CAAR,CAPlB,0DAOXC,QAPW,wBASlB;AATkB,cAUgBjC,QAAQ,CAAC,EAAD,CAVxB,wCAUXkC,SAVW,eAUAC,YAVA,eAYlB;AACA,GAAMC,CAAAA,WAAW,0FAAG,iBAAOC,KAAP,qJAElB;AACAA,KAAK,CAACC,cAAN,GAHkB,kBAKQxB,IAAI,CAACU,WALb,CAKVe,GALU,mBAKVA,GALU,CAKLC,QALK,mBAKLA,QALK,CAOlB;AAPkB,sBAQZb,CAAAA,WAAW,CAACc,GAAZ,CAAgB,CACpBF,GAAG,CAAHA,GADoB,CAEpBG,kBAAkB,CAAExC,QAAQ,CAACa,SAAT,CAAmB4B,UAAnB,CAA8BC,eAA9B,EAFA,CAGpBC,IAAI,CAAEX,SAHc,CAIpBM,QAAQ,CAARA,QAJoB,CAAhB,CARY,QAelB;AACAL,YAAY,CAAC,EAAD,CAAZ,CAEA;AAlBkB,sDAAH,kBAAXC,CAAAA,WAAW,4CAAjB,CAqBA;AACA,mBAAQ,qDACN,gCAEGH,QAAQ,EAAIA,QAAQ,CAACa,GAAT,CAAa,SAAAC,GAAG,qBAAI,oBAAC,WAAD,EAAa,GAAG,CAAEA,GAAG,CAACC,EAAtB,CAA0B,OAAO,CAAED,GAAnC,EAAJ,EAAhB,CAFf,CADM,cASN,4BAAM,QAAQ,CAAEX,WAAhB,eAEE,6BAAO,KAAK,CAAEF,SAAd,CAAyB,QAAQ,CAAE,kBAACG,KAAD,QAAWF,CAAAA,YAAY,CAACE,KAAK,CAACY,MAAN,CAAaC,KAAd,CAAvB,EAAnC,CAAgF,WAAW,CAAC,SAA5F,EAFF,cAIE,8BAAQ,IAAI,CAAC,QAAb,CAAsB,QAAQ,CAAE,CAAChB,SAAjC,SAJF,CATM,CAAR,CAiBD,CAED,QAASiB,CAAAA,WAAT,CAAqBC,KAArB,CAA4B,CAE1B;AAF0B,mBAGKA,KAAK,CAACC,OAHX,CAGnBd,GAHmB,gBAGnBA,GAHmB,CAGdC,QAHc,gBAGdA,QAHc,CAGJK,IAHI,gBAGJA,IAHI,CAK1B;AACA,GAAMS,CAAAA,YAAY,CAAGf,GAAG,GAAKzB,IAAI,CAACU,WAAL,CAAiBe,GAAzB,CAA+B,MAA/B,CAAwC,UAA7D,CAEA;AACA;AACA;AACA,mBAAQ,qDACN,2BAAK,SAAS,mBAAae,YAAb,CAAd,eACE,2BAAK,GAAG,CAAEd,QAAQ,EAAI,4FAAtB,EADF,cAEE,6BAAIK,IAAJ,CAFF,CADM,CAAR,CAMD,CAED,cAAe7B,CAAAA,GAAf","sourcesContent":["import React, {useState, useRef} from 'react';\n// import logo from './logo.svg'; // Get a better logo\nimport './App.css';\n\n// importing components\n// import {ChatRoom} from \"components/ChatRoom.js\";\n// import {SignIn, SignOut} from \"components/Auth.js\";\n\n// importing firebase sdk modules\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\n// importing firebase webhooks\nimport {useAuthState} from 'react-firebase-hooks/auth';\nimport {useCollectionData} from 'react-firebase-hooks/firestore';\n\n// firebase configuration\nfirebase.initializeApp({\n  apiKey: \"AIzaSyBCsCSugwJCU3Hlzmo9HdKXW6AF8oOrMnA\",\n  authDomain: \"fireside-b0dbe.firebaseapp.com\",\n  databaseURL: \"https://fireside-b0dbe.firebaseio.com\",\n  projectId: \"fireside-b0dbe\",\n  storageBucket: \"fireside-b0dbe.appspot.com\",\n  messagingSenderId: \"410455411650\",\n  appId: \"1:410455411650:web:fe7f067423f899f8d9a45b\",\n  measurementId: \"G-73915MQHEL\"\n});\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\n\nfunction App() {\n\n  // Getting user login state\n  const [user] = useAuthState(auth);\n\n  // Asking user to sign-in to see chatroom\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Fireside Chat</h1>\n        <SignOut />\n      </header>\n\n      <section>\n        {user ? <ChatRoom /> : <SignIn />}\n      </section>\n\n    </div>\n  );\n}\n\n\nfunction SignIn() {\n\n  // Creating Google account login provider for firebase\n  const signInWithGoogle = () => {\n    const GoogleAuthenticationProvider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(GoogleAuthenticationProvider);\n  }\n\n  return ( \n    <button onClick={signInWithGoogle}>Sign in with Google</button>\n  )\n}\n\nfunction SignOut() {\n\n  // Checking if user exists to sign out\n  // Inline function to sign out of chat room\n  return auth.currentUser && (\n    <button onClick={() => auth.signOut()}>Sign Out</button>\n  )\n}\n\n// Main chat room in application\n// TODO: Split into multiple chat rooms and add functionality for creating and deleting rooms\nfunction ChatRoom() {\n\n  // const scroller = useRef();  // Creating reference to enable autoscrolling in chat\n  const messagesRef = firestore.collection(\"messages\");  // Getting messages collection for current chat room\n  const query = messagesRef.orderBy(\"createdOnTimestamp\").limit(100); // TODO: change to be dynamic refresh for infinite scroll\n  \n  // Querying messages from firebase for display on frontend\n  const [messages] = useCollectionData(query, {idField: 'id'});\n\n  // Setting initial state of form \n  const [formValue, setFormValue] = useState('');\n\n  // Writing new messages to firebase database\n  const sendMessage = async (event) => {\n\n    // Preventing page refresh on every message submission\n    event.preventDefault();\n\n    const { uid, photoURL } = auth.currentUser;\n\n    // Resolve when document is formatted with new message\n    await messagesRef.add({\n      uid,\n      createdOnTimestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      text: formValue,\n      photoURL\n    })\n\n    // Setting message back to empty string\n    setFormValue(\"\");\n\n    // scroller.current.scrollIntoView({ behavior: 'smooth' });  // Autoscrolling to bottom of chat\n  }\n\n  // Looping over all messages with ChatMessage component to pass message id and contents\n  return (<>\n    <main>\n\n      {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n\n      {/* <span ref={scroller}></span> */}\n\n    </main>\n\n    <form onSubmit={sendMessage}>\n\n      <input value={formValue} onChange={(event) => setFormValue(event.target.value)} placeholder=\"Message\" />\n\n      <button type=\"submit\" disabled={!formValue}>Send</button>\n\n    </form>\n  </>)\n}\n\nfunction ChatMessage(props) {\n  \n  // Extracting message and id from object\n  const{ uid, photoURL, text } = props.message;\n\n  // Checking if message was sent or recieved\n  const messageClass = uid === auth.currentUser.uid ? \"sent\" : \"received\";\n\n  // Returning text body of message\n  // Idk why we need tildes in the className but we do\n  // Stole the default profile photo from Google Images\n  return (<>\n    <div className={`message ${messageClass}`}>\n      <img src={photoURL || \"https://moonvillageassociation.org/wp-content/uploads/2018/06/default-profile-picture1.jpg\"} />\n      <p>{text}</p>\n    </div>\n  </>)\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}