{"ast":null,"code":"var _jsxFileName = \"/Users/sidmadala/Documents/Duke/School/2020-2021/Semester 1/CS 316/Project/fireside/src/App.js\";\nimport React, { useState, useRef } from 'react'; // import logo from './logo.svg'; // Get a better logo\n\nimport './App.css'; // importing components\n// import {ChatRoom} from \"components/ChatRoom.js\";\n// import {SignIn, SignOut} from \"components/Auth.js\";\n// importing firebase sdk modules\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth'; // importing firebase webhooks\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore'; // firebase configuration\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyBCsCSugwJCU3Hlzmo9HdKXW6AF8oOrMnA\",\n  authDomain: \"fireside-b0dbe.firebaseapp.com\",\n  databaseURL: \"https://fireside-b0dbe.firebaseio.com\",\n  projectId: \"fireside-b0dbe\",\n  storageBucket: \"fireside-b0dbe.appspot.com\",\n  messagingSenderId: \"410455411650\",\n  appId: \"1:410455411650:web:fe7f067423f899f8d9a45b\",\n  measurementId: \"G-73915MQHEL\"\n});\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n  // Getting user login state\n  const [user] = useAuthState(auth); // Asking user to sign-in to see chatroom\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, \"Fireside Chat\"), /*#__PURE__*/React.createElement(SignOut, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, user ? /*#__PURE__*/React.createElement(ChatRoom, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }\n  }) : /*#__PURE__*/React.createElement(SignIn, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 32\n    }\n  })));\n}\n\nfunction SignIn() {\n  // Creating Google account login provider for firebase\n  const signInWithGoogle = () => {\n    const GoogleAuthenticationProvider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(GoogleAuthenticationProvider);\n  };\n\n  return /*#__PURE__*/React.createElement(\"button\", {\n    onClick: signInWithGoogle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, \"Sign in with Google\");\n}\n\nfunction SignOut() {\n  // Checking if user exists to sign out\n  // Inline function to sign out of chat room\n  return auth.currentUser && /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => auth.signOut(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, \"Sign Out\");\n} // Main chat room in application\n// TODO: Split into multiple chat rooms and add functionality for creating and deleting rooms\n\n\nfunction ChatRoom() {\n  // const scroller = useRef();  // Creating reference to enable autoscrolling in chat\n  const messagesRef = firestore.collection(\"messages\"); // Getting messages collection for current chat room\n\n  const query = messagesRef.orderBy(\"createdOnTimestamp\").limit(100); // TODO: change to be dynamic refresh for infinite scroll\n  // Querying messages from firebase for display on frontend\n\n  const [messages] = useCollectionData(query, {\n    idField: 'id'\n  }); // Setting initial state of form \n\n  const [formValue, setFormValue] = useState(''); // Writing new messages to firebase database\n\n  const sendMessage = async event => {\n    // Preventing page refresh on every message submission\n    event.preventDefault();\n    const {\n      uid,\n      photoURL\n    } = auth.currentUser; // Resolve when document is formatted with new message\n\n    await messagesRef.add({\n      uid,\n      createdOnTimestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      text: formValue,\n      photoURL\n    }); // Setting message back to empty string\n\n    setFormValue(\"\"); // scroller.current.scrollIntoView({ behavior: 'smooth' });  // Autoscrolling to bottom of chat\n  }; // Looping over all messages with ChatMessage component to pass message id and contents\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }\n  }, messages && messages.map(msg => /*#__PURE__*/React.createElement(ChatMessage, {\n    key: msg.id,\n    message: msg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 40\n    }\n  }))), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: formValue,\n    onChange: event => setFormValue(event.target.value),\n    placeholder: \"Message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: !formValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, \"Send\")));\n}\n\nfunction ChatMessage(props) {\n  // Extracting message and id from object\n  const {\n    uid,\n    photoURL,\n    text\n  } = props.message; // Checking if message was sent or recieved\n\n  const messageClass = uid === auth.currentUser.uid ? \"sent\" : \"received\"; // Returning text body of message\n  // Idk why we need tildes in the className but we do\n  // Stole the default profile photo from Google Images\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: `message ${messageClass}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: photoURL || \"https://moonvillageassociation.org/wp-content/uploads/2018/06/default-profile-picture1.jpg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }, text)));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/sidmadala/Documents/Duke/School/2020-2021/Semester 1/CS 316/Project/fireside/src/App.js"],"names":["React","useState","useRef","firebase","useAuthState","useCollectionData","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","App","user","SignIn","signInWithGoogle","GoogleAuthenticationProvider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","ChatRoom","messagesRef","collection","query","orderBy","limit","messages","idField","formValue","setFormValue","sendMessage","event","preventDefault","uid","photoURL","add","createdOnTimestamp","FieldValue","serverTimestamp","text","map","msg","id","target","value","ChatMessage","props","message","messageClass"],"mappings":"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","sourcesContent":["import React, {useState, useRef} from 'react';\n// import logo from './logo.svg'; // Get a better logo\nimport './App.css';\n\n// importing components\n// import {ChatRoom} from \"components/ChatRoom.js\";\n// import {SignIn, SignOut} from \"components/Auth.js\";\n\n// importing firebase sdk modules\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\n// importing firebase webhooks\nimport {useAuthState} from 'react-firebase-hooks/auth';\nimport {useCollectionData} from 'react-firebase-hooks/firestore';\n\n// firebase configuration\nfirebase.initializeApp({\n  apiKey: \"AIzaSyBCsCSugwJCU3Hlzmo9HdKXW6AF8oOrMnA\",\n  authDomain: \"fireside-b0dbe.firebaseapp.com\",\n  databaseURL: \"https://fireside-b0dbe.firebaseio.com\",\n  projectId: \"fireside-b0dbe\",\n  storageBucket: \"fireside-b0dbe.appspot.com\",\n  messagingSenderId: \"410455411650\",\n  appId: \"1:410455411650:web:fe7f067423f899f8d9a45b\",\n  measurementId: \"G-73915MQHEL\"\n});\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\n\nfunction App() {\n\n  // Getting user login state\n  const [user] = useAuthState(auth);\n\n  // Asking user to sign-in to see chatroom\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Fireside Chat</h1>\n        <SignOut />\n      </header>\n\n      <section>\n        {user ? <ChatRoom /> : <SignIn />}\n      </section>\n\n    </div>\n  );\n}\n\n\nfunction SignIn() {\n\n  // Creating Google account login provider for firebase\n  const signInWithGoogle = () => {\n    const GoogleAuthenticationProvider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(GoogleAuthenticationProvider);\n  }\n\n  return ( \n    <button onClick={signInWithGoogle}>Sign in with Google</button>\n  )\n}\n\nfunction SignOut() {\n\n  // Checking if user exists to sign out\n  // Inline function to sign out of chat room\n  return auth.currentUser && (\n    <button onClick={() => auth.signOut()}>Sign Out</button>\n  )\n}\n\n// Main chat room in application\n// TODO: Split into multiple chat rooms and add functionality for creating and deleting rooms\nfunction ChatRoom() {\n\n  // const scroller = useRef();  // Creating reference to enable autoscrolling in chat\n  const messagesRef = firestore.collection(\"messages\");  // Getting messages collection for current chat room\n  const query = messagesRef.orderBy(\"createdOnTimestamp\").limit(100); // TODO: change to be dynamic refresh for infinite scroll\n  \n  // Querying messages from firebase for display on frontend\n  const [messages] = useCollectionData(query, {idField: 'id'});\n\n  // Setting initial state of form \n  const [formValue, setFormValue] = useState('');\n\n  // Writing new messages to firebase database\n  const sendMessage = async (event) => {\n\n    // Preventing page refresh on every message submission\n    event.preventDefault();\n\n    const { uid, photoURL } = auth.currentUser;\n\n    // Resolve when document is formatted with new message\n    await messagesRef.add({\n      uid,\n      createdOnTimestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      text: formValue,\n      photoURL\n    })\n\n    // Setting message back to empty string\n    setFormValue(\"\");\n\n    // scroller.current.scrollIntoView({ behavior: 'smooth' });  // Autoscrolling to bottom of chat\n  }\n\n  // Looping over all messages with ChatMessage component to pass message id and contents\n  return (<>\n    <main>\n\n      {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n\n      {/* <span ref={scroller}></span> */}\n\n    </main>\n\n    <form onSubmit={sendMessage}>\n\n      <input value={formValue} onChange={(event) => setFormValue(event.target.value)} placeholder=\"Message\" />\n\n      <button type=\"submit\" disabled={!formValue}>Send</button>\n\n    </form>\n  </>)\n}\n\nfunction ChatMessage(props) {\n  \n  // Extracting message and id from object\n  const{ uid, photoURL, text } = props.message;\n\n  // Checking if message was sent or recieved\n  const messageClass = uid === auth.currentUser.uid ? \"sent\" : \"received\";\n\n  // Returning text body of message\n  // Idk why we need tildes in the className but we do\n  // Stole the default profile photo from Google Images\n  return (<>\n    <div className={`message ${messageClass}`}>\n      <img src={photoURL || \"https://moonvillageassociation.org/wp-content/uploads/2018/06/default-profile-picture1.jpg\"} />\n      <p>{text}</p>\n    </div>\n  </>)\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}