{"remainingRequest":"/Users/sidmadala/Documents/Duke/School/2020-2021/Semester 1/CS 316/Project/vue-fireside-chat/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sidmadala/Documents/Duke/School/2020-2021/Semester 1/CS 316/Project/vue-fireside-chat/src/components/ChatRoom.vue?vue&type=style&index=0&id=6cf1c9a4&scoped=true&lang=css&","dependencies":[{"path":"/Users/sidmadala/Documents/Duke/School/2020-2021/Semester 1/CS 316/Project/vue-fireside-chat/src/components/ChatRoom.vue","mtime":1605423171118},{"path":"/Users/sidmadala/Documents/Duke/School/2020-2021/Semester 1/CS 316/Project/vue-fireside-chat/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sidmadala/Documents/Duke/School/2020-2021/Semester 1/CS 316/Project/vue-fireside-chat/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/sidmadala/Documents/Duke/School/2020-2021/Semester 1/CS 316/Project/vue-fireside-chat/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/sidmadala/Documents/Duke/School/2020-2021/Semester 1/CS 316/Project/vue-fireside-chat/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sidmadala/Documents/Duke/School/2020-2021/Semester 1/CS 316/Project/vue-fireside-chat/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKdWwgewogIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTsKICBtYXJnaW46IDA7CiAgcGFkZGluZzogMDsKICBkaXNwbGF5OiBmbGV4OwogIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgbWluLXdpZHRoOiA1MDBweDsKICBiYWNrZ3JvdW5kOiAjZWZlZmVmOwogIHBhZGRpbmc6IDEwcHg7CiAgYm9yZGVyLXJhZGl1czogMDsKfQoKbGkgewogIGRpc3BsYXk6IGZsZXg7Cn0K"},{"version":3,"sources":["ChatRoom.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"ChatRoom.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <main class=\"section\">\n    <h3>Welcome to ChatRoom: {{ chatId }}</h3>\n\n    <router-link to=\"/\">Back</router-link>\n\n    <p>\n    Open this link in another browser window to chat \n      <code>https://your-url.com/#/chats/{{ chatId }}</code>\n    </p>\n\n    <User #user=\"{ user }\">\n      <div v-if=\"user\">\n        <ul>\n          <li v-for=\"message of messages\" :key=\"message.id\">\n            <ChatMessage :message=\"message\" :owner=\"user.uid === message.sender\" />\n          </li>\n        </ul>\n\n        <hr />\n        <h5>Record Audio</h5>\n\n        <button v-if=\"!recorder\" @click=\"record()\" class=\"button is-info\">Record Voice</button>\n        <button v-else @click=\"stop()\" class=\"button is-danger\">Stop</button>\n\n        <br />\n\n        <audio v-if=\"newAudio\" :src=\"newAudioURL\" controls></audio>\n\n        <hr />\n\n        <input v-model=\"newMessageText\" class=\"input\" />\n\n        <button\n          :disabled=\"(!newMessageText && !newAudio) || loading\"\n          class=\"button is-success\"\n          type=\"text\"\n          @click=\"addMessage(user.uid)\"\n        >Send</button>\n      </div>\n\n      <Login v-else />\n    </User>\n  </main>\n</template>\n\n<script>\n\nimport User from './User.vue';\nimport ChatMessage from './ChatMessage.vue';\nimport Login from './Login.vue';\nimport { db, storage } from '../firebase';\n\nexport default {\n  components: {\n    User,\n    Login,\n    ChatMessage,\n  },\n  data() {\n      return {\n          newMessageText: '',\n          loading: false,\n          messages: [],\n          newAudio: null,\n          recorder: null,\n      }\n  },\n  computed: {\n\t// getting chat id path for routing\n    chatId() {\n      return this.$route.params.id;\n    },\n\t// getting messages within chat uid\n    messagesCollection() {\n      return db.doc(`chats/${this.chatId}`).collection('messages');\n    },\n\t// making new URL to store audio\n    newAudioURL() {\n      return URL.createObjectURL(this.newAudio);\n    }\n  },\n\t//getting last 10 messages in chat to display\n  firestore() {\n    return {\n      messages: this.messagesCollection.orderBy('createdAt').limitToLast(10)\n    };\n  },\n  methods: {\n\n\t// asynchronous write to firebase to add message with text and UID\n    async addMessage(uid) {\n\n        this.loading = true;\n\n        let audioURL = null;\n\n        const { id: messageId } = this.messagesCollection.doc();\n\t\t\n\t\t// conditional to add audio file to firestore\n        if (this.newAudio) {\n          const storageRef = storage\n            .ref('chats')\n            .child(this.chatId)\n            .child(`${messageId}.wav`);  // formatting audio as wav in chat id\n\n            await storageRef.put(this.newAudio);\n\t\t\t// wait to receive audio URL before continuing\n          audioURL = await storageRef.getDownloadURL();\n        }\n\n\t\t// set message information\t\n        await this.messagesCollection.doc(messageId).set({\n            text: this.newMessageText,\n            sender: uid,\n            createdAt: Date.now(),\n            audioURL\n        });\n\n        this.loading = false;\n        this.newMessageText = '';\n        this.newAudio = null;\n    },\n\n\t// record audio from browser\n    async record() {\n      this.newAudio = null;\n\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: false\n      });\n\n      const options = { mimeType: \"audio/webm\" };\n      const recordedChunks = [];\n      this.recorder = new MediaRecorder(stream, options);\n\n      this.recorder.addEventListener(\"dataavailable\", e => {\n        if (e.data.size > 0) {\n          recordedChunks.push(e.data);\n        }\n      });\n\n      this.recorder.addEventListener(\"stop\", () => {\n        this.newAudio = new Blob(recordedChunks);\n        console.log(this.newAudio);\n      });\n\n      this.recorder.start();\n    },\n\n\t// asynchronous call to stop recording audio\n    async stop() {\n      this.recorder.stop();\n      this.recorder = null;\n    }\n  }\n};\n</script>\n\n\n<style scoped>\nul {\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n  display: flex;\n  flex-direction: column;\n  min-width: 500px;\n  background: #efefef;\n  padding: 10px;\n  border-radius: 0;\n}\n\nli {\n  display: flex;\n}\n</style>\n"]}]}