{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","SignIn","onClick","GoogleAuthenticationProvider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","ChatRoom","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","event","a","preventDefault","uid","photoURL","add","createdOnTimestamp","FieldValue","serverTimestamp","text","map","msg","ChatMessage","key","id","message","onSubmit","value","onChange","target","placeholder","type","disabled","props","messageClass","className","src","App","useAuthState","user","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"4TAkBAA,IAASC,cAAc,CACrBC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGjB,IAAMC,EAAOV,IAASU,OAChBC,EAAYX,IAASW,YAyB3B,SAASC,IAQP,OACE,4BAAQC,QANe,WACvB,IAAMC,EAA+B,IAAId,IAASU,KAAKK,mBACvDL,EAAKM,gBAAgBF,KAIrB,uBAIJ,SAASG,IAIP,OAAOP,EAAKQ,aACV,4BAAQL,QAAS,kBAAMH,EAAKS,YAA5B,YAMJ,SAASC,IAGP,IAAMC,EAAcV,EAAUW,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,sBAAsBC,MAAM,KAJ5C,EAOCC,YAAkBH,EAAO,CAACI,QAAS,OAA/CC,EAPW,sBAUgBC,mBAAS,IAVzB,mBAUXC,EAVW,KAUAC,EAVA,KAaZC,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAGlBD,EAAME,iBAHY,EAKQzB,EAAKQ,YAAvBkB,EALU,EAKVA,IAAKC,EALK,EAKLA,SALK,SAQZhB,EAAYiB,IAAI,CACpBF,MACAG,mBAAoBvC,IAASW,UAAU6B,WAAWC,kBAClDC,KAAMZ,EACNO,aAZgB,OAgBlBN,EAAa,IAhBK,2CAAH,sDAsBjB,OAAQ,oCACN,8BAEGH,GAAYA,EAASe,KAAI,SAAAC,GAAG,OAAI,kBAACC,EAAD,CAAaC,IAAKF,EAAIG,GAAIC,QAASJ,QAMtE,0BAAMK,SAAUjB,GAEd,2BAAOkB,MAAOpB,EAAWqB,SAAU,SAAClB,GAAD,OAAWF,EAAaE,EAAMmB,OAAOF,QAAQG,YAAY,YAE5F,4BAAQC,KAAK,SAASC,UAAWzB,GAAjC,UAMN,SAASe,EAAYW,GAAO,MAGKA,EAAMR,QAA9BZ,EAHmB,EAGnBA,IAAKC,EAHc,EAGdA,SAAUK,EAHI,EAGJA,KAGhBe,EAAerB,IAAQ1B,EAAKQ,YAAYkB,IAAM,OAAS,WAK7D,OAAQ,oCACN,yBAAKsB,UAAS,kBAAaD,IACzB,yBAAKE,IAAKtB,GAAY,+FACtB,2BAAIK,KAKKkB,MAvHf,WAAe,MAGEC,YAAanD,GAArBoD,EAHM,oBAMb,OACE,yBAAKJ,UAAU,OACb,gCACE,6CACA,kBAACzC,EAAD,OAGF,iCACG6C,EAAO,kBAAC1C,EAAD,MAAe,kBAACR,EAAD,SCnCXmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMhC,c","file":"static/js/main.08746b79.chunk.js","sourcesContent":["import React, {useState, useRef} from 'react';\n// import logo from './logo.svg'; // Get a better logo\nimport './App.css';\n\n// importing components\n// import {ChatRoom} from \"components/ChatRoom.js\";\n// import {SignIn, SignOut} from \"components/Auth.js\";\n\n// importing firebase sdk modules\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\n// importing firebase webhooks\nimport {useAuthState} from 'react-firebase-hooks/auth';\nimport {useCollectionData} from 'react-firebase-hooks/firestore';\n\n// firebase configuration\nfirebase.initializeApp({\n  apiKey: \"AIzaSyBCsCSugwJCU3Hlzmo9HdKXW6AF8oOrMnA\",\n  authDomain: \"fireside-b0dbe.firebaseapp.com\",\n  databaseURL: \"https://fireside-b0dbe.firebaseio.com\",\n  projectId: \"fireside-b0dbe\",\n  storageBucket: \"fireside-b0dbe.appspot.com\",\n  messagingSenderId: \"410455411650\",\n  appId: \"1:410455411650:web:fe7f067423f899f8d9a45b\",\n  measurementId: \"G-73915MQHEL\"\n});\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\n\nfunction App() {\n\n  // Getting user login state\n  const [user] = useAuthState(auth);\n\n  // Asking user to sign-in to see chatroom\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Fireside Chat</h1>\n        <SignOut />\n      </header>\n\n      <section>\n        {user ? <ChatRoom /> : <SignIn />}\n      </section>\n\n    </div>\n  );\n}\n\n\nfunction SignIn() {\n\n  // Creating Google account login provider for firebase\n  const signInWithGoogle = () => {\n    const GoogleAuthenticationProvider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(GoogleAuthenticationProvider);\n  }\n\n  return ( \n    <button onClick={signInWithGoogle}>Sign in with Google</button>\n  )\n}\n\nfunction SignOut() {\n\n  // Checking if user exists to sign out\n  // Inline function to sign out of chat room\n  return auth.currentUser && (\n    <button onClick={() => auth.signOut()}>Sign Out</button>\n  )\n}\n\n// Main chat room in application\n// TODO: Split into multiple chat rooms and add functionality for creating and deleting rooms\nfunction ChatRoom() {\n\n  // const scroller = useRef();  // Creating reference to enable autoscrolling in chat\n  const messagesRef = firestore.collection(\"messages\");  // Getting messages collection for current chat room\n  const query = messagesRef.orderBy(\"createdOnTimestamp\").limit(100); // TODO: change to be dynamic refresh for infinite scroll\n  \n  // Querying messages from firebase for display on frontend\n  const [messages] = useCollectionData(query, {idField: 'id'});\n\n  // Setting initial state of form \n  const [formValue, setFormValue] = useState('');\n\n  // Writing new messages to firebase database\n  const sendMessage = async (event) => {\n\n    // Preventing page refresh on every message submission\n    event.preventDefault();\n\n    const { uid, photoURL } = auth.currentUser;\n\n    // Resolve when document is formatted with new message\n    await messagesRef.add({\n      uid,\n      createdOnTimestamp: firebase.firestore.FieldValue.serverTimestamp(),\n      text: formValue,\n      photoURL\n    })\n\n    // Setting message back to empty string\n    setFormValue(\"\");\n\n    // scroller.current.scrollIntoView({ behavior: 'smooth' });  // Autoscrolling to bottom of chat\n  }\n\n  // Looping over all messages with ChatMessage component to pass message id and contents\n  return (<>\n    <main>\n\n      {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n\n      {/* <span ref={scroller}></span> */}\n\n    </main>\n\n    <form onSubmit={sendMessage}>\n\n      <input value={formValue} onChange={(event) => setFormValue(event.target.value)} placeholder=\"Message\" />\n\n      <button type=\"submit\" disabled={!formValue}>Send</button>\n\n    </form>\n  </>)\n}\n\nfunction ChatMessage(props) {\n  \n  // Extracting message and id from object\n  const{ uid, photoURL, text } = props.message;\n\n  // Checking if message was sent or recieved\n  const messageClass = uid === auth.currentUser.uid ? \"sent\" : \"received\";\n\n  // Returning text body of message\n  // Idk why we need tildes in the className but we do\n  // Stole the default profile photo from Google Images\n  return (<>\n    <div className={`message ${messageClass}`}>\n      <img src={photoURL || \"https://moonvillageassociation.org/wp-content/uploads/2018/06/default-profile-picture1.jpg\"} />\n      <p>{text}</p>\n    </div>\n  </>)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}